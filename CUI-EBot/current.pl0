(var for '(lambda '(variable_init condition variable_transform code)"    'variable_init     (if condition       'code variable_transform ((var for) '" 'condition" 'variable_transform" 'code")"       '"     )    "  )")
(var a '1.0")
(var repl '(var exit no)             ((var while)             '(eq (var exit) no)"             '(print Return Value:              (eval (read 'Enter Portable Lisp 0 code")))")              (print You Left the repl)            ")
(var sayStuff '((var for) '(var i (print Say (var x (read 'What would you like me to say?")) (var x) how many times?) (read '")) (var a 0)" '(and (lt (var a) (var i)) (lt (var i) 15))" '(var a (add (var a) 1))" '(print (var x))")")
(var exit 'yes")
(var dowhile '(lambda '(code condition)" 'code ((var while) 'condition" 'code")")")
(var until '(lambda '(condition code)" '((var while) '(not condition)" 'code")")")
(var i '1")
(var x 'Shit will hit the fan")
(var while '(lambda '(condition code)" '((var for) '" 'condition" '" 'code")")")
(mkdev lte '(lambda '(x y)" '(or (lt x y) (eq x y))")")
